name: Release Windows Installer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build (release)
      run: cargo build --release

    - name: Generate release tag
      id: tag
      shell: pwsh
      run: |
        $SHORT_SHA = "${{ github.sha }}".Substring(0, 7)
        $TAG = "release-$SHORT_SHA"
        echo "tag=$TAG" >> $env:GITHUB_OUTPUT
        echo "Generated tag: $TAG"

    - name: Prepare dist and verify binary
      shell: pwsh
      run: |
        $ErrorActionPreference = 'Stop'
        New-Item -ItemType Directory -Path 'dist' -Force | Out-Null
        if (-not (Test-Path "target\release\wslnetman.exe")) { throw "target\release\wslnetman.exe not found" }
        Get-Item "target\release\wslnetman.exe" | Format-List Name,Length,FullName

    - name: Compute absolute binary path
      id: paths
      shell: pwsh
      run: |
        $bin = (Resolve-Path "target\release\wslnetman.exe").Path
        echo "bin=$bin" >> $env:GITHUB_OUTPUT

    - name: Run makensis
      uses: joncloud/makensis-action@v4
      with:
        script-file: installer/install.nsi
        arguments: /DVERSION=${{ steps.tag.outputs.tag }} /DAPP_BIN=${{ steps.paths.outputs.bin }}

    - name: Set installer output vars
      id: nsis_meta
      shell: pwsh
      run: |
        $Tag='${{ steps.tag.outputs.tag }}'
        $Path = "dist\wslnetman-$Tag-setup.exe"
        echo "installer_path=$Path" >> $env:GITHUB_OUTPUT
        echo "installer_name=$(Split-Path $Path -Leaf)" >> $env:GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: WSL Network Manager ${{ steps.tag.outputs.tag }}
        body: |
          Automated release of WSL Network Manager

          Installation:
          - Download and run the NSIS installer for Windows (.exe)

          Commit: ${{ github.sha }}
          Build Run ID: ${{ github.run_id }}
        draft: false
        prerelease: false

    - name: Upload Installer to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.nsis_meta.outputs.installer_path }}
        asset_name: ${{ steps.nsis_meta.outputs.installer_name }}
        asset_content_type: application/vnd.microsoft.portable-executable