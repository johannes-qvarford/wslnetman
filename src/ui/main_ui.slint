import { VerticalBox, HorizontalBox, TabWidget, ScrollView, Button, ComboBox, LineEdit } from "std-widgets.slint";

export struct NetworkInterface {
    name: string,
    ipv4_addresses: [string],
    ipv6_addresses: [string],
    mac_address: string,
    is_up: bool,
    is_loopback: bool,
    environment: string,  // New field to identify source environment
}

export struct PortInfo {
    process_id: string,
    process_name: string,
    protocol: string,
    port: string,
    direction: string,
    network: string,
}


export struct DockerNetwork {
    name: string,
    driver: string,
    scope: string,
    subnet: string,
}

export component MainWindow inherits Window {
    width: 1024px;
    height: 768px;
    title: "WSL Network Manager";
    
    in property <[NetworkInterface]> network-interfaces: [];
    in property <[PortInfo]> ports: [];
    in property <[DockerNetwork]> docker-networks: [];
    in property <string> ping-response: "";
    in property <string> http-response: "";
    in property <string> raw-output: "";
    
    out property <int> selected-network-index: -1;
    out property <string> selected-network-type: "";
    out property <string> packet-type: "ping";
    out property <string> destination: "";
    out property <string> selected-interface: "";
    
    callback network-selected(int);
    callback send-packet();
    callback refresh-data();
    
    VerticalBox {
        HorizontalBox {
            Button {
                text: "Refresh";
                clicked => {
                    refresh-data();
                }
            }
        }
        
        TabWidget {
            Tab {
                title: "Networks";
                VerticalBox {
                    Text {
                        text: "Networks";
                        font-size: 18px;
                        font-weight: 700;
                    }
                    
                    HorizontalBox {
                        ScrollView {
                            width: 100%;
                            VerticalBox {
                                // Header row
                                HorizontalBox {
                                    Text { text: "Environment"; width: 120px; font-weight: 600; }
                                    Text { text: "Interface"; width: 140px; font-weight: 600; }
                                    Text { text: "MAC Address"; width: 140px; font-weight: 600; }
                                    Text { text: "IPv4 Addresses"; width: 160px; font-weight: 600; }
                                    Text { text: "IPv6 Addresses"; width: 200px; font-weight: 600; }
                                    Text { text: "Status"; width: 80px; font-weight: 600; }
                                }
                                
                                // Separator
                                Rectangle {
                                    height: 1px;
                                    background: #cccccc;
                                }
                                
                                // Network interfaces data
                                for network in network-interfaces : VerticalBox {
                                    HorizontalBox {
                                        Text { 
                                            text: network.environment; 
                                            width: 120px; 
                                            color: network.environment == "Windows" ? #0066cc : (network.environment == "WSL" ? #009900 : #666666);
                                            font-weight: 500;
                                        }
                                        Text { 
                                            text: network.name; 
                                            width: 140px; 
                                            font-weight: network.is_loopback ? 400 : 500;
                                        }
                                        Text { 
                                            text: network.mac_address == "" ? "N/A" : network.mac_address; 
                                            width: 140px;
                                            font-family: "monospace";
                                        }
                                        Text { 
                                            text: {
                                                // Join IPv4 addresses with commas
                                                network.ipv4_addresses.length > 0 ? (
                                                    network.ipv4_addresses.length > 1 ? 
                                                        network.ipv4_addresses[0] + ", " + (network.ipv4_addresses.length > 2 ? network.ipv4_addresses[1] + ", ..." : network.ipv4_addresses[1])
                                                        : network.ipv4_addresses[0]
                                                ) : "N/A"
                                            };
                                            width: 160px;
                                            wrap: TextWrap.word-wrap;
                                            font-family: "monospace";
                                            font-size: 12px;
                                            font-weight: 600;
                                        }
                                        Text { 
                                            text: {
                                                // Join IPv6 addresses with commas
                                                network.ipv6_addresses.length > 0 ? (
                                                    network.ipv6_addresses.length > 1 ? 
                                                        network.ipv6_addresses[0] + ", " + (network.ipv6_addresses.length > 2 ? network.ipv6_addresses[1] + ", ..." : network.ipv6_addresses[1])
                                                        : network.ipv6_addresses[0]
                                                ) : "N/A"
                                            };
                                            width: 200px;
                                            wrap: TextWrap.word-wrap;
                                            font-family: "monospace";
                                            font-size: 12px;
                                            font-weight: 600;
                                        }
                                        Text { 
                                            text: network.is_up ? "UP" : "DOWN"; 
                                            width: 80px;
                                            color: network.is_up ? #009900 : #cc0000;
                                            font-weight: 600;
                                        }
                                    }
                                    // Grid line separator
                                    Rectangle {
                                        height: 1px;
                                        background: #e0e0e0;
                                    }
                                }
                            }
                        }
                        
                        ScrollView {
                            width: 700px;
                            VerticalBox {
                                Text {
                                    text: "Port Information";
                                    font-size: 16px;
                                    font-weight: 600;
                                }
                                for port in ports : HorizontalBox {
                                    Text { text: port.process-id; }
                                    Text { text: port.process-name; }
                                    Text { text: port.protocol; }
                                    Text { text: port.port; }
                                    Text { text: port.direction; }
                                    Text { text: port.network; }
                                }
                            }
                        }
                    }
                }
            }
            
            
            Tab {
                title: "Docker";
                VerticalBox {
                    Text {
                        text: "Docker Networks";
                        font-size: 18px;
                        font-weight: 700;
                    }
                    
                    ScrollView {
                        VerticalBox {
                            for docker in docker-networks: HorizontalBox {
                                Text { text: docker.name; }
                                Text { text: docker.driver; }
                                Text { text: docker.scope; }
                                Text { text: docker.subnet; }
                            }
                        }
                    }
                }
            }
            
            Tab {
                title: "Packet Sender";
                VerticalBox {
                    Text {
                        text: "Packet Sender";
                        font-size: 18px;
                        font-weight: 700;
                    }
                    
                    HorizontalBox {
                        Text { text: "Source Network:"; }
                        // ComboBox {
                        //     model: network-interfaces;
                        //     current-value <=> selected-interface;
                        // }
                    }
                    
                    HorizontalBox {
                        Text { text: "Packet Type:"; }
                        ComboBox {
                            model: ["ping", "HTTP over TCP"];
                            current-value <=> packet-type;
                        }
                    }
                    
                    HorizontalBox {
                        Text { text: "Destination:"; }
                        LineEdit {
                            placeholder-text: "Enter IP address or hostname";
                            text <=> destination;
                        }
                    }
                    
                    Button {
                        text: "Send Packet";
                        clicked => {
                            send-packet();
                        }
                    }
                    
                    TabWidget {
                        Tab {
                            title: "Ping Response";
                            ScrollView {
                                Text {
                                    text: ping-response;
                                    wrap: TextWrap.word-wrap;
                                }
                            }
                        }
                        
                        Tab {
                            title: "HTTP Response";
                            ScrollView {
                                Text {
                                    text: http-response;
                                    wrap: TextWrap.word-wrap;
                                }
                            }
                        }
                        
                        Tab {
                            title: "Raw Output";
                            ScrollView {
                                Text {
                                    text: raw-output;
                                    wrap: TextWrap.word-wrap;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
