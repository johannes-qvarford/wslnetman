import { VerticalBox, HorizontalBox, TabWidget, ScrollView, Button, ComboBox, LineEdit } from "std-widgets.slint";
import { NetworkDetailModal } from "components/network_detail_modal.slint";
import { NetworkTab } from "components/network_tab.slint";
import { DockerTab } from "components/docker_tab.slint";
import { NetworkInterface, PortInfo, DockerNetwork } from "types.slint";

export component MainWindow inherits Window {
    width: 1024px;
    height: 768px;
    title: "WSL Network Manager";
    
    in property <[NetworkInterface]> network-interfaces: [];
    in property <[PortInfo]> ports: [];
    in property <[DockerNetwork]> docker-networks: [];
    in property <string> ping-response: "";
    in property <string> http-response: "";
    in property <string> raw-output: "";
    in property <NetworkInterface> selected-network-detail;
    in property <[PortInfo]> filtered-ports: [];
    
    out property <int> selected-network-index: -1;
    out property <string> selected-network-type: "";
    out property <string> packet-type: "ping";
    out property <string> destination: "";
    out property <string> selected-interface: "";
    in-out property <bool> show-network-detail: false;
    
    callback network-selected(int);
    callback network-row-clicked(int);
    callback send-packet();
    callback refresh-data();
    callback show-network-popup();
    callback copy-to-clipboard(string);
    
    VerticalBox {
        HorizontalBox {
            Button {
                text: "Refresh";
                clicked => {
                    refresh-data();
                }
            }
        }
        
        TabWidget {
            Tab {
                title: "Networks";
                NetworkTab {
                    network-interfaces: network-interfaces;
                    ports: ports;
                    network-row-clicked(index) => { network-row-clicked(index); }
                }
            }
            
            
            Tab {
                title: "Docker";
                DockerTab {
                    docker-networks: docker-networks;
                }
            }
            
            Tab {
                title: "Packet Sender";
                VerticalBox {
                    Text {
                        text: "Packet Sender";
                        font-size: 18px;
                        font-weight: 700;
                    }
                    
                    HorizontalBox {
                        Text { text: "Source Network:"; }
                        // ComboBox {
                        //     model: network-interfaces;
                        //     current-value <=> selected-interface;
                        // }
                    }
                    
                    HorizontalBox {
                        Text { text: "Packet Type:"; }
                        ComboBox {
                            model: ["ping", "HTTP over TCP"];
                            current-value <=> packet-type;
                        }
                    }
                    
                    HorizontalBox {
                        Text { text: "Destination:"; }
                        LineEdit {
                            placeholder-text: "Enter IP address or hostname";
                            text <=> destination;
                        }
                    }
                    
                    Button {
                        text: "Send Packet";
                        clicked => {
                            send-packet();
                        }
                    }
                    
                    TabWidget {
                        Tab {
                            title: "Ping Response";
                            ScrollView {
                                Text {
                                    text: ping-response;
                                    wrap: TextWrap.word-wrap;
                                }
                            }
                        }
                        
                        Tab {
                            title: "HTTP Response";
                            ScrollView {
                                Text {
                                    text: http-response;
                                    wrap: TextWrap.word-wrap;
                                }
                            }
                        }
                        
                        Tab {
                            title: "Raw Output";
                            ScrollView {
                                Text {
                                    text: raw-output;
                                    wrap: TextWrap.word-wrap;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    // Network Detail Modal Overlay
    if show-network-detail : NetworkDetailModal {
        network-detail: selected-network-detail;
        filtered-ports: filtered-ports;
        show-modal <=> show-network-detail;
        copy-to-clipboard(data) => { copy-to-clipboard(data); }
    }
    
    // Connect callback to show popup
    show-network-popup => {
        show-network-detail = true;
    }
}
